{"postlist":[{"title":"브라우저의 동작원리","author":"Jay.J","date":"2022-07-14T00:00:00.000Z","categories":["html"],"tags":["html"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/html.png","url":"/post/2022-07-14-DOMRendering","con":"---\n\n<br>\n\n최근 HTML 파일은 어떻게 브라우저에 그려지는지 질문을 받은 적이 있다.<br>\nVue를 공부하면서 브라우저의 동작원리에 대해서 잠깐 다룬적이 있었으나,<br>\n정확히 알고 있지 않아서 답변을 할 수 없었고 이번 기회에 브라우저 렌더링 과정에 대해서 공부하고 정리해보려고 한다.\n\n## 브라우저 렌더링 동작 과정\n\n주소창에 url을 입력하고 접속하였을 때 브라우저는 해당 페이지에 대한 리소스를 서버에 요청한다.<br>\n그 이후 브라우저의 렌더링 동작 과정은 5가지로 나눌 수 있다.\n\n1. Parsing\n2. Render Tree\n3. Layout\n4. Paint\n5. Composite\n\n<br>\n\n<img src=\"/assets/img/vue/webkitflow.png\" alt=\"\">\n> 브라우저의 동작 순서\n\n### 1. Parsing\n\n서버에서 받아온 리소스(HTML, CSS)의 문자는 브라우저가 바로 인식하지 못한다.<br>\n그렇기에 문자를 해석하는 과정이 "},{"title":"Box Model","author":"Jay.J","date":"2022-05-24T00:00:00.000Z","categories":["html","css"],"tags":["html","css"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/html.png","url":"/post/2022-05-24-BoxModel","con":"---\n\n<br>\n\n## Box Model이란?\n\n모든 HTML 요소는 박스(box) 모양으로 구성되며, 이것을 박스 모델(box model)이라고 부른다.\n박스 모델은 HTML 요소를 패딩(padding), 테두리(border), 마진(margin), 그리고 내용(content)으로 구분한다.\n\n<br>\n\n## 웹 브라우저에서의 Box Model은?\n\n웹 브라우저에서의 Box Model은 content-box 와 border-box 기준이 있다.\ncontent-box는 콘텐츠 영역을 기준으로 크기를 정하며 border-box는 테두리 영역을 기준으로 크기를 정한다.\nCSS의 속성을 통하여 Box Model의 기준을 정할 수 있다.\n\n<br>\n\n## CSS 문법\n\n```css\nbox-sizing: content-box | border-box | initial | inherit\n```\n<br>\n\n- content-box : 콘텐트 영역을 기준으로 크기를 정한다\n- border-box "},{"title":"DOCTYPE 이란?","author":"Jay.J","date":"2022-05-03T00:00:00.000Z","categories":["html"],"tags":["html"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/html.png","url":"/post/2022-05-06-DOCTYPE","con":"---\n\n<br>\n\n## DOCTYPE 란?\n웹 문서에서 DTD(문서 유형 정의)를 통해서 현재 문서가 어떤 버전으로 기술되었는지 브라우저에 전달하는데 이것을 DOCTYPE 선언이라고 한다.<br>\nDTD(Document Type Definition)는 XHTML, HTML, HTML5 세 가지 유형이 있으며, 선언된 문서 형식에 따라 마크업 속성을 처리하는 기준이 정해지고, 유효성 검사에 활용된다.\n\n<br>\n\n## DOCTYPE 선언의 목적\n\n웹 브라우저는 두 가지 렌더링 모드를 가지고 있는데 쿼크모드(Quirks mode)와 표준모드(Standard mode)이다.<br>\n브라우저가 출력하고자 하는 문서가 최신이라면 표준모드로 렌더링하며, 오래된 문서라면 쿼크 모드로 렌더링 하게 된다.<br>\n<br>\n이 과정에서 어떤 유형의 문서인지 정의해주는 것이 DOCTYPE 선언이다.\nDOCTYPE을 생략할 경우, 브라우저마다 상이하게 보여지거나(크로스 브라우징 오류) 버전에 따라 태그"},{"title":"나를 괴롭히는 CORS","author":"Jay.J","date":"2020-12-20T00:00:00.000Z","categories":["html"],"tags":["html"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/CORS.png","url":"/post/2020-12-20-CORS","con":"---\n\n<br>\n\n## &nbsp;\n\n> 🚨 Access to XMLHttpRequest at 'http:// [A] ' from origin 'http:// [B] ' has been blocked by CORS policy : No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\n웹 프로젝트를 구축하거나 운영하다보면 한번씩은 나타나는 오류이다.<br>\n그리고 생각보다 자주 나타나는 오류이기 때문에 누구나 한번쯤은 봤을거라고 생각한다.<br>\n그렇기에 한번 자세히 알고 넘어가야겠다고 생각해서 정리한다.<br>\n\n<br>\n\n## 교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)\n\nCORS는 Cross-Origin Resource Sharing의 약자로 교차 출저 리소스 공유이다.<br>\n<br>\n<a href=\"https://developer.mozill"},{"title":"웹 접근성(견고성)","author":"Jay.J","date":"2020-03-22T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/accessibility.jpg","url":"/post/2020-03-22-webAccessibility_5","con":"---\n\n<br>\n\n## 운용의 용이성\n사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다.\n\n- [4.1.1 마크업 오류 방지](#411-마크업-오류-방지)\n- [4.2.1 웹 애플리케이션 접근성 준수](#421-웹-애플리케이션-접근성-준수)\n\n<br>\n\n### 4.1.1 마크업 오류 방지\n마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 한다.\n\n#### 1) 요소의 열고 닫음\n\n##### <b style='color:red'>잘못된 소스</b>\n```HTML\n<ul>\n  <li>목록</li>\n  <li>목록</li>\n  <li>목록</li>\n<p>내용</p>\n```\n\n##### <b style='color:blue'>잘된 소스</b>\n```HTML\n<ul>\n  <li>목록</li>\n  <li>목록</li>\n  <li>목록</li>\n</ul>\n<p>내용</p>\n```\n\n<br>\n\n#### 2) 중첩 관계\n\n##### <b style="},{"title":"웹 접근성(이해의 용이성)","author":"Jay.J","date":"2020-03-21T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/accessibility.jpg","url":"/post/2020-03-21-webAccessibility_4","con":"---\n\n<br>\n\n## 이해의 용이성\n콘텐츠는 이해할 수 있어야 한다.\n\n- [3.1.1 기본 언어 표시](#311-기본-언어-표시)\n- [3.2.1 사용자 요구에 따른 실행](#321-사용자-요구에-따른-실행)\n- [3.3.1 콘텐츠의 선형화](#331-콘텐츠의-선형화)\n- [3.3.2 표의 구성](#332-표의-구성)\n- [3.4.1 레이블 제공](#341-레이블-제공)\n- [3.4.2 오류 정정](#342-오류-정정)\n\n<br>\n\n### 3.1.1 기본 언어 표시\n주로 사용하는 언어를 명시해야 한다.\n\n```HTML\n<html lang=”ko”>\n```\n> HTML5\n\n<br>\n\n### 3.2.1 사용자 요구에 따른 실행\n사용자가 의도하지 않은 기능 (새 창, 초점 변화 등)은 실행되지 않아야 한다.\n\n#### 1) 페이지 진입시 뜨는 새 창(팝업)\n\n<img src=\"/assets/img/webAccessibility/firstpopup.jpg\" alt=\"\" style=\"b"},{"title":"웹 접근성(운용의 용이성)","author":"Jay.J","date":"2020-03-14T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/accessibility.jpg","url":"/post/2020-03-14-webAccessibility_3","con":"---\n\n<br>\n\n## 운용의 용이성\n사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다.\n\n- [2.1.1 키보드 사용 보장](#211-키보드-사용-보장)\n- [2.1.2 초점 이동](#212-초점-이동)\n- [2.1.3 조작 가능](#213-조작-가능)\n- [2.2.1 응답시간 조절](#221-응답시간-조절)\n- [2.2.2 정지 기능 제공](#222-정지-기능-제공)\n- [2.3.1 깜빡임과 번쩍임 사용 제한](#231-깜빡임과-번쩍임-사용-제한)\n- [2.4.1 반복 영역 건너뛰기](#241-반복-영역-건너뛰기)\n- [2.4.2 제목 제공](#242-제목-제공)\n- [2.4.3 적절한 링크 텍스트](#243-적절한-링크-텍스트)\n\n<br>\n\n### 2.1.1 키보드 사용 보장\n모든 기능은 키보드만으로도 사용할 수 있어야 한다. (PC웹)<br>\n터치(touch) 기반 모바일 기기의 모든 컨트롤은 누르기 동작으로 제어할 수 있어야 한다. (모바일웹)\n\n#"},{"title":"웹 접근성(인식의 용이성)","author":"Jay.J","date":"2020-03-07T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/accessibility.jpg","url":"/post/2020-03-07-webAccessibility_2","con":"---\n\n<br>\n\n## 인식의 용이성\n모든 콘텐츠는 사용자가 인식할 수 있어야 한다.\n\n- [1.1.1 적절한 대체 텍스트 제공](#111-적절한-대체-텍스트-제공)\n- [1.2.1 자막 제공](#121-자막-제공)\n- [1.3.1 색에 무관한 콘텐츠 인식](#131-색에-무관한-콘텐츠-인식)\n- [1.3.2 명확한 지시사항 제공](#132-명확한-지시사항-제공)\n- [1.3.3 텍스트 콘텐츠의 명도 대비](#133-텍스트-콘텐츠의-명도-대비)\n- [1.3.4 자동 재생 금지](#134-자동-재생-금지)\n- [1.3.5 콘텐츠 간의 구분](#135-콘텐츠-간의-구분)\n\n<br>\n\n### 1.1.1 적절한 대체 텍스트 제공\n텍스트 아닌 콘텐츠는 그 의미나 용도를 이해할 수 있도록 대체 텍스트를 제공해야 한다.\n\n#### 1) 의미가 있는 이미지는 대체 텍스트를 제공한다.\n\n<img src=\"/assets/img/webAccessibility/need_alt_img.png\" alt=\""},{"title":"웹 접근성이란","author":"Jay.J","date":"2020-02-29T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/accessibility.jpg","url":"/post/2020-02-29-webAccessibility_1","con":"---\n\n<br>\n\n## &nbsp;\n\n이전 회사에서 웹 접근성에 대해 공부를 했었다.<br>\n공부했던 내용을 정리해두면 좋겠다는 생각이 있었는데,<br>\n미루고 미루다가 이제 정리를 한다.\n\n## 웹 접근성(Web Accessibility)이란\n\n웹 접근성이란 어떠한 사용자가 접근을 하더라도, 동일한 정보를 제공할 수 있도록 보장하는 것이다.<br>\n즉, 장애인, 고령자등 모든 사람이 비장애인과 차별되지 않은 정보를 얻을 수 있어야한다.<br>\n간단한 예로 이미지가 제공된다고 했을 때, 시각적으로 불편한 사람은 이미지의 정보를 얻을 수 없다.<br>\n그렇기에 이미지에 대한 대체 텍스트가 제공되어 텍스트로 정보를 전달할 수 있어야한다.\n> 시각장애인의 경우, 사이트를 읽어주는 스크린리더라는 프로그램으로 정보에 접근한다.<br>\n> 스크린리더는 이미지를 읽어주지 못하기 때문에 이미지 태그의 alt 속성을 이용하여 대체 텍스트를 제공해야한다.\n\n<br>\n\n## 4가지 원칙\n\n- <b>인"}]}