{"postlist":[{"title":"SSR(서버사이드 렌더링)과 CSR(클라이언트 사이드 렌더링)","author":"Jay.J","date":"2021-06-26T00:00:00.000Z","categories":["HTTP"],"tags":["HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/http.png","url":"/post/2021-06-26-SSR","con":"---\n\n## SSR\n\n인터넷을 사용하다 보면 내가 검색했던 키워드나 정보에 관련된 광고만 눈에 보인 적이 있을 것이다.<br>\n이는 기업에서 우리의 행동 정보를 저장하고 분석하여 활용하고 있기 때문이다.<br>\n> 개인 맞춤 광고를 하다보니 사생활 논란이 있어 현재는 개인 맞춤 광고는 중지 계획을 가지고 있다.<br>\n> \"2021년 3월 3일 - 내년 4월까지 자사 웹브라우저 크롬 사용자의 개인 정보가 담긴 ‘쿠키(사용자가 특정 웹사이트에 접속할 때 자동으로 생성되는 파일)’를 분석하는 사업을 완전히 중단\"\n\n즉, <b style=\"color:blue\">트래킹은 사용자의 행동 데이터를 수치로 나타내기 위해서 데이터를 수집하여 데이터 베이스에 저장하는 것</b>이다.<br>\n\n<br>\n\n## 트래킹 분석\n\n저장된 정보를 가지고 웹 사이트 관리자는 웹 분석을 한다.<br>\n분석을 통하여 사람들이 사이트를 사용하는 방법, 사람들이 좋아하는 것과 싫어하는 것, 방문자가 어디에서 왔는지,"},{"title":"웹 추적 기술 - 웹 트래킹(Tracking)","author":"Jay.J","date":"2021-06-05T00:00:00.000Z","categories":["HTTP"],"tags":["HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/http.png","url":"/post/2021-06-05-Tracking","con":"---\n\n## 트래킹(Tracking)\n\n인터넷을 사용하다 보면 내가 검색했던 키워드나 정보에 관련된 광고만 눈에 보인 적이 있을 것이다.<br>\n이는 기업에서 우리의 행동 정보를 저장하고 분석하여 활용하고 있기 때문이다.<br>\n> 개인 맞춤 광고를 하다보니 사생활 논란이 있어 현재는 개인 맞춤 광고는 중지 계획을 가지고 있다.<br>\n> \"2021년 3월 3일 - 내년 4월까지 자사 웹브라우저 크롬 사용자의 개인 정보가 담긴 ‘쿠키(사용자가 특정 웹사이트에 접속할 때 자동으로 생성되는 파일)’를 분석하는 사업을 완전히 중단\"\n\n즉, <b style=\"color:blue\">트래킹은 사용자의 행동 데이터를 수치로 나타내기 위해서 데이터를 수집하여 데이터 베이스에 저장하는 것</b>이다.<br>\n\n<br>\n\n## 트래킹 분석\n\n저장된 정보를 가지고 웹 사이트 관리자는 웹 분석을 한다.<br>\n분석을 통하여 사람들이 사이트를 사용하는 방법, 사람들이 좋아하는 것과 싫어하는 것, 방문자가"},{"title":"Cookie와 Session의 차이는 무엇일까","author":"Jay.J","date":"2021-05-23T00:00:00.000Z","categories":["HTTP"],"tags":["javascript","HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/http.png","url":"/post/2021-05-23-CookieVsSeccion","con":"---\n\n## 쿠키(Cookie)\n\n사용자가 어떠한 웹 사이트를 방문할 경우 사용자의 컴퓨터에 저장하는 작은 기록 정보 파일이다.<br>\n사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다.<br>\n사용자의 상태 정보를 로컬에 저장했다가 필요시 정보를 참조하거나 재사용 한다.<br>\n사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있다.\n\n### 쿠키의 구성 요소\n\n- 이름 : 각각의 쿠키를 구별하는 데 사용되는 이름\n- 값 : 쿠키의 이름과 관련된 값\n- 유효시간 : 쿠키의 유지시간\n- 도메인 : 쿠키를 전송할 도메인\n- 경로 : 쿠키를 전송할 요청 경로\n\n### 쿠키 특징\n\n- 이름, 값, 만료일(저장 기간 설정), 경로 정보로 구성되어 있다.\n- 사용자마다 총 300개의 쿠키를 저장할 수 있다.\n- 하나의 도메인 당 20개의 쿠키를 가질 수 있"},{"title":"RESTful API 이란","author":"Jay.J","date":"2021-05-15T00:00:00.000Z","categories":["HTTP"],"tags":["HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/restapi.png","url":"/post/2021-05-15-RESTfulAPI","con":"---\n\n## RESTful API란?\n\nREST를 기반 API를 의미합니다.<br>\nREST은 무엇인지, REST API는 무엇인지, RESTful API는 무엇인지 알아보려고합니다.\n\n<br>\n<hr>\n<br>\n\n## 1. RESTful API에서 REST 란?\n\nREST는 <span style=\"color:blue\">Representational State Transfer</span>의 약자로써 풀어서 설명하자면<br>\n<span style=\"color:red\">자원을 이름으로 구분해 해당 자원의 상태를 주고 받는 것</span>을 말한다.<br>\n<br>\n<b>웹에 존재하는 자원(이미지, 동영상, DB)에 대한 CRUD 요청을,<br>\n고유한 URI(Resource와 Method)로 표현하여 특정한 형태로 전달하는 방법이다.</b>\n> <b> CRUD : Create, Read, Update, Delete </b> <Br>\n> - Create : 데이터 생성(POST)<br>"},{"title":"통신을 위한 라이브러리, Axios","author":"Jay.J","date":"2021-05-02T00:00:00.000Z","categories":["VueJs","axios"],"tags":["javascript","axios","HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/axios.png","url":"/post/2021-05-01-Axios","con":"---\n\n<b>\"Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리입니다.\"</b><br>\n<br>\nAxios 공식문서에 나와 있는 Axios의 정의이다.<br>\n자바스크립트의 Fetch API와 비슷한 기능을 가지고 있다.\n\n## axios vs fetch\n\n<div class=\"table-wrapper\">\n  <table>\n    <tr>\n      <td>요청 객체에 URL을 가지고 있다.</td>\n      <td>요청 개체에 URL이 없다 .</td>\n    </tr>\n    <tr>\n      <td>쉽게 설치할 수 있는 독립 실행형 타사 패키지 이다.</td>\n      <td>대부분의 최신 브라우저에 내장되어 있다.<br>설치가 필요 없다.</td>\n    </tr>\n    <tr>\n      <td>내장된 XSRF 보호 기능 있다.</td>\n      <td>별도 보호 없다.</td>\n    </tr>\n    "},{"title":"Vue Lifecycle 이해하기","author":"Jay.J","date":"2021-04-28T00:00:00.000Z","categories":["VueJs"],"tags":["javascript","vue.js","VueLifecycle"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/vuejs.png","url":"/post/2021-04-24-VueLifecycle","con":"---\n\n## Vue Lifecycle 이해하기\n\n모든 Vue 앱은 Vue 함수로 새 Vue 인스턴스를 만드는 것부터 시작한다.\n\n```js\nvar vm = new Vue({\n  // 옵션\n})\n```\n\nVue 인스턴스는 생성될 때, 일련의 초기화 단계를 거친다.<br>\n예를들어 아래와 같은 경우가 있다.\n\n- 데이터 관찰 설정이 필요한 경우\n- 템플릿을 컴파일 하는 경우\n- 인스턴스를 DOM에 마운트하는 경우\n- 데이터가 변경되어 DOM을 업데이트 하는 경우\n\n<br>\n\n## 이미지로 보는 라이프 사이클\n\n<img src=\"/assets/img/vue/vue_lifecycle.png\" alt=\"\">\n\n<br>\n\n## 1. Create 단계\n라이프 사이클 훅에서 제일 처음 실행되는 Create 단계이다.<br>\nDOM이 생성되기 이전에 실행되는 훅으로써 DOM에 접근하거나 this.$el 을 사용하지 못한다.<br>\n<br>\n이 단계는 <b style=\"color:#1976D2\">b"},{"title":"Vuex가 무엇인가?","author":"Jay.J","date":"2021-04-18T00:00:00.000Z","categories":["VueJs"],"tags":["javascript","vue.js","Vuex"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/vuejs.png","url":"/post/2021-04-18-Vuex","con":"---\n\n## Vuex가 무엇인가?\n\nVue.js에 대한 상태 관리 패턴이자 라이브러리이다.<br>\n모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있다.\n\n<br>\n\n## 상태 관리란?\n\n간단한 Vue 코드로 확인해보겠다.\n\n```js\nnew Vue({\n  // 상태\n  data () {\n    return {\n      count : 0\n    }\n  },\n  // 뷰\n  template : `\n    <div> {{ count }} </div>\n  `,\n  // 액션\n  methods: {\n    increment () {\n      this.count++\n    }\n  }\n})\n```\n\n- 상태(State) : 앱을 작동하는 소스이다.\n- 뷰(View) : 상태를 보여주는 매핑이다.\n- 액션(Actions) : 사용자 입력에 대해 반응적으로 대응한다.\n\n<img src=\"/assets/img/vue/vuex_flow.png\" alt"},{"title":"Vue Router 사용하기","author":"Jay.J","date":"2021-04-10T00:00:00.000Z","categories":["VueJs"],"tags":["javascript","vue.js","vue Router"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/vuejs.png","url":"/post/2021-04-10-VueRouter","con":"---\n\n## Vue Router 란\n\n'Vue 라우터는 Vue.js (opens new window)의 공식 라우터이며,<br>\nVue.js를 사용한 싱글 페이지 앱(SPA)을 쉽게 만들 수 있도록 Vue.js의 코어와 긴밀히 통합되어 있다.'<br>\n라고 공식문서에 설명되어있다.<br>\n<br>\n싱글 페이지 앱(SPA)는 최초에 한번 페이지를 로드하고 이후부터는 특정 부분만 변경하여 페이지를 보여주는 방식이다.<br>\n<br>\n기존의 웹 서비스는 서버로부터 데이터가 변경 및 페이지를 이동 할 때 화면 전체를 렌더링 하는 방식이였다.<br>\nSPA를 사용함으로써 전체 페이지를 렌더링하는데 드는 오버헤드가 줄어들어 앱의 속도가 향상되어 더 빠른 속도를 사용자에게 제공할 수 있다.<br>\n<br>\n즉, Vue Router를 사용하면 <b>싱글 페이지 앱(SPA)을 만드는 데 필요한 URL 이동 및 특정 부분의 변경</b>을 간단히 구현할 수 있다.<br>\n\n<br>\n\n## Vue Ro"},{"title":"Vue-CLI","author":"Jay.J","date":"2021-03-14T00:00:00.000Z","categories":["VueJs"],"tags":["javascript","vue.js"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/vuejs.png","url":"/post/2021-03-14-VueCLI","con":"---\n\n## Vue-CLI 란\n\nVue CLI은 Vue.js의 개발 환경을 쉽고 빠르게 구축할 수 있도록 도와주는 도구이다.<br>\ncli를 이용하면, 짧은 시간내에 프로젝트의 환경을 설정할 수 있다.<br>\n사용자가 조금 더 개발에 집중할 수 있도록 도와준다.\n> CLI란 Command Line Interface의 약자로 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식을 뜻한다.<br>\n> 즉, 작업 명령은 사용자가 툴바 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. - <a href=\"https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9_%EC%A4%84_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">위키백과</a>\n\n<br>\n\n## Vue CLI 구성요소\n\nVue CLI는 여러 패키지로 이루어져 있다.<br>\n그 중에 공식 홈페이지에서 설명하는 패키지를"},{"title":"Vue.js란","author":"Jay.J","date":"2021-03-05T00:00:00.000Z","categories":["VueJs"],"tags":["javascript","vue.js"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/vuejs.png","url":"/post/2021-03-05-whatIsVue.js","con":"---\n\n## Vue.js 란 무엇인가?\n\nVue.js의 공식문서에서는 <b>'사용자 인터페이스를 만들기 위한 프로그레시브 프레임워크'</b> 라고 설명하고 있다.<br>\n즉, 보여지는 화면을 만드는 자바스크립트 프레임워크 중의 하나이다.<br>\nVue.js는 진입장벽이 낮으며 쉽고 빠르게 개발을 할 수 있다는 것이 가장 큰 장점으로 가지고 있다.<br>\n\n> <a href=\"https://kr.vuejs.org/v2/guide/index.html\">Vue.js 공식사이트</a>\n\n<br>\n\n## 장점 및 특징\n\n### 학습곡선이 낮다.\n\nVue.js는 웹 개발을 단순화하고 정리하기 위해 개발된 대중적인 자바스크립트 프론트엔드 프레임워크이다.<br>\n수많은 프로젝트에서 AngularJS를 사용하여 구글을 위해 작업하던 Evan You에 의해 개발되었다.<br>\n웹 UI 개발(컴포넌트, 선언형 UI, 핫 리로딩, 타임 트래블 디버깅 등)의 아이디어를 더 접근 가능하도록 만드는데 초점을"},{"title":"나를 괴롭히는 CORS","author":"Jay.J","date":"2020-12-20T00:00:00.000Z","categories":["html"],"tags":["html"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/CORS.png","url":"/post/2020-12-20-CORS","con":"---\n\n\n> 🚨 Access to XMLHttpRequest at 'http:// [A] ' from origin 'http:// [B] ' has been blocked by CORS policy : No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\n웹 프로젝트를 구축하거나 운영하다보면 한번씩은 나타나는 오류이다.<br>\n그리고 생각보다 자주 나타나는 오류이기 때문에 누구나 한번쯤은 봤을거라고 생각한다.<br>\n그렇기에 한번 자세히 알고 넘어가야겠다고 생각해서 정리한다.<br>\n\n<br>\n\n## 교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)\n\nCORS는 Cross-Origin Resource Sharing의 약자로 교차 출저 리소스 공유이다.<br>\n<br>\n<a href=\"https://developer.mozilla.org/ko/docs/We"},{"title":"GET과 POST 방식","author":"Jay.J","date":"2020-09-28T00:00:00.000Z","categories":["HTTP"],"tags":["HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/http.png","url":"/post/2020-09-28-GetAndPost","con":"---\n\n웹 브라우저로 어떤 사이트에 접속한다고 했을 때, 사용자는 URL을 입력하여 접근한다.<br>\nHTTP 프로토콜을 통하여 사용자는 요청을 보내고 서버는 그 요청에 맞게 응답한다.<br>\n그리고 그 요청의 방식에는 크게 2가지 방식이 있고 그것이 바로 GET방식과 POST방식이다\n\n<br>\n\n## GET\n\nGET 방식은 서버로부터 어떠한 정보를 조회하기 위해서 사용되는 방식이다.<br>\nGET은 서버에게 요청할 때 URL에 요청을 담아 보낸다. <br>\nURL의 끝에 ? 를 통하여 요청을 하는데 요청의 파라미터가 여러 개일 경우 &을 이용하여 요청한다.<br>\n\n```\nwww.test.com/test?id=value&id2=value2&id3=value3\n```\n\n요청의 파라미터는 키와 값의 형식으로 보낸다.<br>\n위에 적은 url에서 키는 id이며, 값은 value으로 이루어진 문자열이다.<br>\n<br>\n이러한 방식의 요청은 URL에 변수를 보내줘야 하고, 어떤 정보를 "},{"title":"VanillaJs","author":"Jay.J","date":"2020-08-25T00:00:00.000Z","categories":["javascript"],"tags":["javascript","VanillaJs"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-08-25-VanillaJs","con":"---\n\n## Vanilla JS란?\nVanilla JS(바닐라 자바스크립트)란 어떠한 프레임워크와 라이브러리가 적용되지 않은 날 것의 자바스크립트를 바닐라 자바스크립트라고 한다.\n\n<br>\n\n## 왜 Vanilla JS 사용하는 것인가\n개인적인 생각이지만 배보다 배꼽이 커지는 상황도 많았던 것 같다.<br>\njQuery라는 DOM을 컨트롤 하는데에 있어서 매우 뛰어난 라이브러리가 있다.<br>\n하지만 특정한 곳에서 한번만 사용할 것인데 그를 위해 jQuery를 사용한다면 효율적인 면에서 떨어진다.<br>\njQuery 또한 자바스크립트의 라이브러리이기 때문에 순수한 자바스크립트보다 속도면에서 성능이 떨어진다.<br>\n<br>\n또한 이전까지의 자바스크립트 버전은 DOM에 접근하려면 jQuery에 비해 길게 작성해야했기에 조금 더 편리한 jQuery를 개발하는 데 편하고 좋았다고 생각한다.<br>\n\n```js\n// class가 item 인 요소에 이벤트 바인딩\n\n// javascript"},{"title":"자바스크립트 엄격모드?","author":"Jay.J","date":"2020-06-11T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-06-11-use_strict","con":"---\n\n## 자바스크립트 엄격모드란 ?\n\nECMAScript 5 에서 소개되었다.<br>\n기본으로 우리 사용하는 자바스크립트는 <b>\"느슨한모드(sloppy mode)\"</b>라고 불리며<br>\n문법이나 살짝 벗어나는 오류 정도는 조용히 무시하고 작동되었다.<br>\n<b>\"엄격한 모드(strict mod)\"</b>를 사용하면 조금 더 디테일하게 문법이나 오류를 잡아낸다.\n\n<br>\n\n## 엄격모드를 사용하려면\n\n사용법은 간단하다. <br>\n엄격모드를 사용하기 위해서는 스크립트를 작성하기 전 최상단에 '\"use strict\";'를 작성해준다<br>\n\n```js\n\n'use strict';\n\nfunction A(){\n  ...\n}\n\nvar b = 'hi';\n\n```\n\n## 무엇이 다른가\n\n엄격모드를 설명하면서 조금 더 디테일하게 문법과 오류를 잡아낸다고 설명했다.<br>\n\n```js\n// 느슨한 모드\n\nb = 'hi';\nvar undefined = 5;\nfunction sum(a, a,"},{"title":"Javascript에서의 This","author":"Jay.J","date":"2020-04-15T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-04-15-javascriptThis","con":"---\n\nthis가 무엇이냐라고 누군가 물어봤을 때 의미 자체에 순간 망설였던 적이 있었다.<br>\n그래서 this는 무엇이고 어떻게 동작하는 지에 대해 포스팅 하려고 한다.\n\n## This 무엇이냐 넌\nthis. 자바스크립트의 this는 호출한 객체가 저장되어있는 속성이다.\n\n```js\nconsole.log(this);  // window\n```\n\n기본적으로 this는 window 객체의 정보를 저장하고 있다.<br>\n기본적으로 사용하는 메서드들 또한 상단에의 window를 통해 호출하기 때문이다.\n\n```js\nwindow.console.log(this);  // window\n```\n> console에 찍힌 window 객체를 자세히보기를 열어서 찾으면 console를 찾을 수 있을 것이다.\n\nwindow객체의 console 객체의 log 메서드를 통하여 호출하였기에 this는 window의 정보를 저장하고 있다.\n\n<br>\n\n## 일반함수에서 This\n\n일반함수 또한 window"},{"title":"웹 접근성(견고성)","author":"Jay.J","date":"2020-03-22T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","url":"/post/2020-03-22-webAccessibility_5","con":"---\n\n## 운용의 용이성\n사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다.\n\n- [4.1.1 마크업 오류 방지](#411-마크업-오류-방지)\n- [4.2.1 웹 애플리케이션 접근성 준수](#421-웹-애플리케이션-접근성-준수)\n\n<br>\n\n### 4.1.1 마크업 오류 방지\n마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 한다.\n\n#### 1) 요소의 열고 닫음\n\n##### <b style='color:red'>잘못된 소스</b>\n```HTML\n<ul>\n  <li>목록</li>\n  <li>목록</li>\n  <li>목록</li>\n<p>내용</p>\n```\n\n##### <b style='color:blue'>잘된 소스</b>\n```HTML\n<ul>\n  <li>목록</li>\n  <li>목록</li>\n  <li>목록</li>\n</ul>\n<p>내용</p>\n```\n\n<br>\n\n#### 2) 중첩 관계\n\n##### <b style='color"},{"title":"웹 접근성(이해의 용이성)","author":"Jay.J","date":"2020-03-21T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","url":"/post/2020-03-21-webAccessibility_4","con":"---\n\n## 이해의 용이성\n콘텐츠는 이해할 수 있어야 한다.\n\n- [3.1.1 기본 언어 표시](#311-기본-언어-표시)\n- [3.2.1 사용자 요구에 따른 실행](#321-사용자-요구에-따른-실행)\n- [3.3.1 콘텐츠의 선형화](#331-콘텐츠의-선형화)\n- [3.3.2 표의 구성](#332-표의-구성)\n- [3.4.1 레이블 제공](#341-레이블-제공)\n- [3.4.2 오류 정정](#342-오류-정정)\n\n<br>\n\n### 3.1.1 기본 언어 표시\n주로 사용하는 언어를 명시해야 한다.\n\n```HTML\n<html lang=”ko”>\n```\n> HTML5\n\n<br>\n\n### 3.2.1 사용자 요구에 따른 실행\n사용자가 의도하지 않은 기능 (새 창, 초점 변화 등)은 실행되지 않아야 한다.\n\n#### 1) 페이지 진입시 뜨는 새 창(팝업)\n\n<img src=\"/assets/img/webAccessibility/firstpopup.jpg\" alt=\"\" style=\"border:"},{"title":"웹 접근성(운용의 용이성)","author":"Jay.J","date":"2020-03-14T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","url":"/post/2020-03-14-webAccessibility_3","con":"---\n\n## 운용의 용이성\n사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다.\n\n- [2.1.1 키보드 사용 보장](#211-키보드-사용-보장)\n- [2.1.2 초점 이동](#212-초점-이동)\n- [2.1.3 조작 가능](#213-조작-가능)\n- [2.2.1 응답시간 조절](#221-응답시간-조절)\n- [2.2.2 정지 기능 제공](#222-정지-기능-제공)\n- [2.3.1 깜빡임과 번쩍임 사용 제한](#231-깜빡임과-번쩍임-사용-제한)\n- [2.4.1 반복 영역 건너뛰기](#241-반복-영역-건너뛰기)\n- [2.4.2 제목 제공](#242-제목-제공)\n- [2.4.3 적절한 링크 텍스트](#243-적절한-링크-텍스트)\n\n<br>\n\n### 2.1.1 키보드 사용 보장\n모든 기능은 키보드만으로도 사용할 수 있어야 한다. (PC웹)<br>\n터치(touch) 기반 모바일 기기의 모든 컨트롤은 누르기 동작으로 제어할 수 있어야 한다. (모바일웹)\n\n#### 1)"},{"title":"웹 접근성(인식의 용이성)","author":"Jay.J","date":"2020-03-07T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","url":"/post/2020-03-07-webAccessibility_2","con":"---\n\n## 인식의 용이성\n모든 콘텐츠는 사용자가 인식할 수 있어야 한다.\n\n- [1.1.1 적절한 대체 텍스트 제공](#111-적절한-대체-텍스트-제공)\n- [1.2.1 자막 제공](#121-자막-제공)\n- [1.3.1 색에 무관한 콘텐츠 인식](#131-색에-무관한-콘텐츠-인식)\n- [1.3.2 명확한 지시사항 제공](#132-명확한-지시사항-제공)\n- [1.3.3 텍스트 콘텐츠의 명도 대비](#133-텍스트-콘텐츠의-명도-대비)\n- [1.3.4 자동 재생 금지](#134-자동-재생-금지)\n- [1.3.5 콘텐츠 간의 구분](#135-콘텐츠-간의-구분)\n\n<br>\n\n### 1.1.1 적절한 대체 텍스트 제공\n텍스트 아닌 콘텐츠는 그 의미나 용도를 이해할 수 있도록 대체 텍스트를 제공해야 한다.\n\n#### 1) 의미가 있는 이미지는 대체 텍스트를 제공한다.\n\n<img src=\"/assets/img/webAccessibility/need_alt_img.png\" alt=\"\" styl"},{"title":"웹 접근성이란","author":"Jay.J","date":"2020-02-29T00:00:00.000Z","categories":["html"],"tags":["html","Web Accessibility"],"math":"true","mermaid":"true","url":"/post/2020-02-29-webAccessibility_1","con":"---\n<!-- <img src=\"/assets/img/vue/webkitflow.png\" alt=\"\"> -->\n\n이전 회사에서 웹 접근성에 대해 공부를 했었다.<br>\n공부했던 내용을 정리해두면 좋겠다는 생각이 있었는데,<br>\n미루고 미루다가 이제 정리를 한다.\n\n## 웹 접근성(Web Accessibility)이란\n\n웹 접근성이란 어떠한 사용자가 접근을 하더라도, 동일한 정보를 제공할 수 있도록 보장하는 것이다.<br>\n즉, 장애인, 고령자등 모든 사람이 비장애인과 차별되지 않은 정보를 얻을 수 있어야한다.<br>\n간단한 예로 이미지가 제공된다고 했을 때, 시각적으로 불편한 사람은 이미지의 정보를 얻을 수 없다.<br>\n그렇기에 이미지에 대한 대체 텍스트가 제공되어 텍스트로 정보를 전달할 수 있어야한다.\n> 시각장애인의 경우, 사이트를 읽어주는 스크린리더라는 프로그램으로 정보에 접근한다.<br>\n> 스크린리더는 이미지를 읽어주지 못하기 때문에 이미지 태그의 alt 속성을 이용하"},{"title":"Sass & SCSS 란?","author":"Jay.J","date":"2019-08-31T00:00:00.000Z","categories":["css"],"tags":["sass","scss","css"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/sass.png","url":"/post/2019-08-31-whatIsSass","con":"---\r\n\r\n최근 프론트쪽을 담당하는 직군의 기술 스택을 보면 Sass를 심심찮게 볼 수 있습니다.\r\n그래서 Sass는 무엇인가에 대해서 알아보려고 합니다.\r\n\r\n> 본 글에서는 Sass에 대해서만 알아보며, 문법과 컴파일 방법에 대해서는 다루지 않습니다.\r\n\r\n<br>\r\n\r\n## Sass 란?\r\nSass는 Syntactically Awesome Style Sheets의 약자이며,\r\nCSS를 우리가 조금 더 편하게 사용하기 위해 확장한 언어입니다.\r\n그러나 웹에서는 CSS만 직접 동작하기 때문에 Sass는 웹에서 사용하기 위해서는 컴파일을 해주어야 합니다.\r\n그러기에 Sass는 <b>CSS Preprocessor(CSS 전처리기)</b>라고 불립니다. \r\n> 전처리기 란?\r\n> 프로그램을 만들 때 소스파일 > 전처리기 -> 컴파일러 ->  실행파일 순으로 실행되는데,\r\n> <b>전처리기(Preprocessor)</b>는 소스 코딩을 한 후 컴파일 하기 직전에 처리하는 컴파일러의 한 "},{"title":"CI(codeigniter)의 MVC패턴 프로젝트 경험","author":"Jay.J","date":"2019-06-05T00:00:00.000Z","categories":["Architecture"],"tags":["Architecture","Design Pattern","Retrospect"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/codeigniter.png","url":"/post/2019-06-05-CodeigniterAndMVC_Use","con":"---\n\n회사에서 개발팀에 코드이그나이터를 도입하였다.<br>\n개발팀에 도입한다고 해서 사실 크게 관심이 없었으며,<br>\n큰 영향도 없을 것이라고 생각했다.<br>\n<br>\n하지만 퍼블리셔 입장에서도 기존의 방식과 조금씩 달랐고<br>\n하나씩 경험했던 내용을 기록해두려고 한다.<br>\n\n## Codeigniter란\n\nCodeigniter(이하 코드이그나이터)란 PHP로 작성된 웹 프레임워크다.<br>\nMVC패턴으로 동작한다.<br>\n> <a href=\"/posts/whatIsMVC/\">MVC에 관한 포스팅</a>\n\n<br>\n\n## 기존의 방식과 달라진 퍼블리셔 업무\n\n기존의 방식과 제일 크게 달라졌던 점은 역시 MVC패턴을 사용함에 따른 변화이다.<br>\n\n<img src=\"/assets/img/architecture/mvc.png\" alt=\"\" style=\"max-width:300px\">\n\n이미지와 같이 User가 Url을 통하여 접근하면 해당 URL의 따라 Controller에"},{"title":"MVC패턴에 대해서","author":"Jay.J","date":"2019-05-09T00:00:00.000Z","categories":["Architecture"],"tags":["Architecture","Design Pattern"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/mvc.jpg","url":"/post/2019-05-09-whatIsMVC","con":"---\n\n## MVC 란\n\nMVC는 Model, View, Controller의 약자이다.<br>\nMVC는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴이다.<br>\n소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있다.<br>\n\n<img src=\"/assets/img/architecture/mvc.png\" alt=\"\" style=\"max-width:500px\">\n\nUser는 Controller에게 요청하고, Controller는 Model에게 명령을 보내고,<br>\nModel은 해당의 데이터를 View에게 제공하여, User는 View를 통해 정보를 얻을 수 있다.<br>\n<br>\n하나 하나의 기능을 자세히 살펴보면 아래와 같다.<br>\n<br>\n\n### Model\n\n모델(model)이란 어떠한 동작을 수행하는 코드를 말한다.<br>\n모델은 데이터가 무엇인지를 정의한다.<br>\n데이터 자체는 사용자에게 어떻게 보일지에 대해 신"},{"title":"Require.js 을 사용했던 프로젝트에 대한 회고","author":"Jay.J","date":"2019-02-10T00:00:00.000Z","categories":["javascript"],"tags":["javascript","AMD","require.js","Retrospect"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2019-02-10-requirejs_use","con":"---\n\n<br>\n\n기존의 프로젝트를 진행할 때에는 필요한 기능을 전역 함수 파일에 추가하여 사용했다.<br>\n전역 파일에 기능을 추가하여 사용하다보니 기능이 늘어날 수록 코드는 복잡해져갔으며 <br>\n모든 페이지에서 불필요한 기능까지 전부 호출하는게 비효율적으로 느껴졌다.<br>\n<br>\n그렇기에 최근 알게 되었던 AMD/Require.js에 관심을 더욱 가지게 되었으며, <br>\n신규 프로젝트에 Require.js를 사용해보기 했다.<br>\n> <a href=\"/posts/AMD_requirejs/\">AMD / Require.js에 대한 포스팅</a>\n\n<br>\n\n### 프로젝트 초반\n\n디자인을 보고 퍼블리싱하며, 공통으로 쓰이는 기능과 특정 페이지에서 사용 되는 기능을 파악했다.<br>\n공통으로 쓰이는 기능들 가운데, 기존 전역 함수에 있었던 기능들은 분리하여 모듈화 시키며 스크립트를 나누는 작업에 집중했다.<br>\n팀원들이 각각 다른 프로젝트를 진행하고 있었기에 혼자 구글링하"},{"title":"HTTP 와 HTTPS, Status Code","author":"Jay.J","date":"2018-11-18T00:00:00.000Z","categories":["HTTP"],"tags":["HTTP"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/httphttps.jpg","url":"/post/2018-11-18-HTTP_HTTPS_Status_Code","con":"---\r\n\r\n## HTTP 와 HTTPS 란  \r\n  \r\n인터넷을 사용하다보면 HTTP와 HTTPS로 시작되는 주소를 볼 수 있다.    \r\n어떤 차이가 있어서 HTTP와 HTTPS를 나눠서 쓰는지 알아보려고 한다.  \r\n\r\n<br>\r\n\r\n### HTTP\r\nHTTP는 <b>Hyper Text Transfer Protocol</b>의 약자로  \r\nWorld Wide Web에서 사용되는 기본 프로토콜이며 이 프로토콜은 메시지가 형식화되고  \r\n전송되는 방법과 다양한 명령에 대한 응답으로 <b>웹 서버와 브라우저가 수행해야하는 작업을 정의</b>한다.  \r\n<br>\r\n  \r\n### HTTPS\r\nHTTPS는 <b>Hyper Text Transfer Protocol over Secure sockets layter</b>의 약자이다.  \r\n기존의 HTTP는 보안장치 없이 그대로 정보를 전송하기에 보안에 취약하다.  \r\n그 보안에 취약한 문제를 해결하고자 HTTP에 secure sockets l"},{"title":"AMP Conference","author":"Jay.J","date":"2018-11-05T00:00:00.000Z","categories":["conference"],"tags":["conference"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/amp.jpg","url":"/post/2018-11-05-amp_conference","con":"---\r\n\r\n## AMP(Accelerated Mobile Pages)\r\nAMP는 Accelerated Mobile Pages의 약자로 Google에서 만든 오픈소스이며,  \r\n웹 페이지를 빠르고 번개와 같이 즉시 로딩 될 수 있게  \r\n모바일 <b>웹의 성능을 높이기 위한 목적을 가지고 있는 오픈소스 라이브러리</b>다.\r\n  \r\n<br>\r\n  \r\n### AMP의 특징\r\nAMP의 특징으로는 <b>즉시 페이지를 로드한다는 큰 틀안에서 이루어진다</b>.  \r\n비동기 스크립트만을 이용하여 페이지의 성능을 개선하고,  \r\n이미지와 iframe 등도 다운로드 전에 크기와 위치를 잡아 성능을 개선한다.  \r\n또한 css를 인라인으로 작성하여 호출할 때 보다 페이지를 더 빠르게 로드한다.  \r\n> 추가적인 정보 : <a href=\"https://www.ampproject.org/ko/learn/about-how/\" target=\"_blank\">https://www.ampproject.org/"},{"title":"Node.js 란?","author":"Jay.J","date":"2018-07-08T00:00:00.000Z","categories":["nodejs"],"tags":["nodejs"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/nodejs.png","url":"/post/2018-07-08-node_init","con":"---\r\n\r\n## Node.js 란?\r\n\r\nJavaScript는 Browser에서 작동하는 JavaScript와 V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경에서 돌아가는 JavaScript가 있다.  \r\n  \r\n<b>Node.js는 V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경에서 돌아가는 JavaScript 이다.</b>  \r\n런타임 환경에서 JavaScript로 서버를 구성할 수 있는 것일 뿐, Node.js 자체는 서버가 아니다.  \r\n> node.js !== 서버  \r\n\r\n<br>\r\nBrowser에서 돌아가는 JavaScript와 런타임 환경에서 돌아가는 JavaScript는 차이가 있다.  \r\n한 가지의 차이를 예를 들면,  \r\nBrowser에서 돌아가는 JavaScript에서 전역객체는 window 이지만,  \r\n런타임 환경에서 돌아가는 JavaScript에서 전역객체는 global 이다.  \r\n  \r\n<br>\r\n##"},{"title":"AMD & require.js","author":"Jay.J","date":"2018-06-23T00:00:00.000Z","categories":["javascript"],"tags":["javascript","AMD","require.js"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-06-23-AMD_requirejs","con":"---\n\n## AMD\n\nAMD(Asynchronous Module Definition)란 모듈을 정의하는 방법과 모듈이 필요할 때 비동기로 로딩하는 방법을 정의한 API 이다.\nAMD는 세 가지의 핵심 개념을 가지고 동작한다.\n<br>\n#### 1. 동적 로딩\n\n동적 로딩(Dynamic Loading, Lazy Loading)은 페이지 렌더링을 방해하지 않으면서 필요한 파일만 로딩할 수 있다.\n\n브라우저는 문서를 위에서 아래로 읽어내려오며, \\<script\\> 태그를 만나면 \\<script\\>의 HTTP 요청과 다운로드, 파싱(Parsing), 실행이 일어나는 동안 브라우저는 다른 동작을 하지 않는다.\n그로 인하여 페이지 렌더링은 느려지는데, 이를 최적화 하는 기법으로 \\<script\\> 태그를 \\<body\\> 태그의 마지막에 배치하는 방법이 있다.\n하지만 이 방법 또한 첫 렌더링과 첫 인터랙션에 필요하지 않은, 페이지에 필요한 모든 JavaScript를 로딩하기 때문에 사용자가 첫"},{"title":"Javascript Call Stack and Event Loop","author":"Jay.J","date":"2018-05-11T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-05-11-Call_Stack_and_Event_Loop","con":"---\n\n## Call Stack and Event Loop\n> 호출 스택 및 이벤트 루프\n\n<br>\n\n### 자바 스크립트 엔진\njavascript 를 해석하고 실행하는 인터프리터.\n> 인터프리터 : 프로그래밍 언어의 소스 코드를 바로 실행하는 컴퓨터 프로그램 또는 환경을 말한다.\n\n엔진에는 4가지로 구성되어있다.\n- [Heap](#heap)\n- [CallStack](#callstack)\n- [EventQueue](#eventqueue)\n- [EventLoop](#eventloop)\n\n<br>\n\n### Heap\n객체나 변수 값들이 들어가있는 영역으로 메모리의 할당이 일어나는 곳이다.\n\n<br>\n\n### CallStack\nCall Stack은 코드 실행에 따라 호출 스택(task)이 쌓이는 곳이다.\n자바스크립트는 기본적으로 싱글 쓰레드 기반 언어이다.\n따라서 코드 순서에 따라 호출 스택(task)이 쌓이면 작업 시 그 순서에 맞게 한번에 하나씩 호출하여 처리한다.\n즉. <b>하나의 "},{"title":"Javascript 실행 컨텍스트","author":"Jay.J","date":"2018-05-04T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-05-04-Execution_Context","con":"---\r\n\r\n## Javascript 실행 컨텍스트\r\n\r\n<br>\r\n\r\n### 실행 컨테스트란\r\n\r\n자바스크립트가 실행될 때 생성되는 실행 단위를 실행 컨텍스트라고 부른다.  \r\n자바스크립트가 실행되면 함수들이 차곡차곡 <b>콜 스택(Call Stack)</b>이라 곳에 쌓이는데,  \r\n<b>실행 컨텍스트는 Call Stack에 쌓이는 하나하나의 실행 정보</b>이다.\r\n\r\n```js\r\n\r\nconsole.log('전역 스코프');\r\nfunction first(){\r\n  console.log('First Context');\r\n  second();\r\n}\r\nfunction second(){\r\n  console.log('Second Context');\r\n}\r\nfirst();\r\n\r\n// 컨텍스트 실행순서\r\n// 1. console.log('전역 스코프') 컨텍스트에 들어감  \r\n// 2. first함수가 컨텍스트에 들어감  \r\n// 3. second함수가 컨텍스트에 들어감\r\n// 4. sec"},{"title":"How do you stop event propagation?","author":"Jay.J","date":"2018-04-09T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-04-09-stop_event_propagation","con":"---\n\n## How do you stop event propagation?\n> 이벤트 전파를 어떻게 중지합니까?\n\n<br>\n\n### 이벤트 전파란?\n\n#### html\n```html\n<div class=\"boxDiv click01\">\n    <p>3</p>\n    <div class=\"boxDiv click02\">\n        <p>2</p>\n        <div class=\"boxDiv click03\">\n            <p>1</p>\n        </div>\n    </div>\n</div>\n<p class=\"result\"></p>\n```\n#### css\n```css\n.boxDiv{border:1px solid #000;padding:20px}\n.click01{width:300px;margin:0 50px;background:#aaa}\n.click02{background:#ddd}\n.click03{background:#fff}\n```\n#### js\n```js\nvar c"},{"title":"Where do you place the JavaScript?","author":"Jay.J","date":"2018-03-29T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-03-29-Where_do_you_place_the_JavaScript","con":"---\r\n\r\n## Where do you place the JavaScript?\r\n> JavaScript는 어디에 두어야합니까?\r\n\r\n<br>\r\n\r\n### 1. Head, Body\r\n\\<head\\> 섹션에 삽입하거나 \\<body\\> 섹션의 시작 부분에 놓는 방법은 안좋다.  \r\n해당 부분에 위치시킬 경우 문서는 페이지 로드시  \r\n페이지를 읽다가 \\<script\\> 를 만날 경우 페이지의 분석을 멈추고  \r\n스크립트를 로드한 후 페이지를 읽기 때문에 성능면에서 안좋다.  \r\n<br>\r\n\r\n#### 브라우저가 웹 사이트를 로드 할 때 일어나는 일\r\n1. 문서 가져 온다 (예 : index.html, index.asp, main.php ...등)\r\n2. HTML 구문 분석한다.\r\n3. 파서는 문서를 위에서 부터 아래로 읽는다.  \r\n    중간에 외부 스크립트 파일을 참조하는 \\<script\\> 태그를 발견한다.\r\n4. 브라우저가 스크립트 파일을 확인하고 요청한다.  \r\n    <b>그"}]}