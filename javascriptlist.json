{"postlist":[{"title":"Icon Font란?","author":"Jay.J","date":"2023-09-30T00:00:00.000Z","categories":["javascript","ReactJs","NextJs"],"tags":["javascript","ReactJs","NextJs"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/nextjs.png","url":"/post/2023-09-12-NextJs","con":"---\r\n\r\n<br>\r\n\r\nNext.js는 React 라이브러리의 프레임워크이다.<br>\r\nPre-Rendering, 서버 사이드 렌더링(Server Side Rendering - SSR), App Router, Code Splitting  같은 다양하고 풍부한 기능을 제공한다.<br>\r\n<br>\r\nReact는 클라이언트 사이드 렌더링(Client Side Rendering - CSR)으로 Search Engine Optimization(SEO)의 대응이 미흡하다.<br>\r\n그래서 <b>SEO를 대응하기 위해서 SSR 을 지원하는 Next.js를 사용</b>한다고 많은 포스트에서 작성하고 있다.\r\n\r\n## Next.js가 제공하는 기능들.\r\n\r\n### Pre-Rendering\r\n\r\n기본적으로 Next.js는 Static-Site Generate(SSG)와 Server Side Rendering(SSR)을 제공한다.<br>\r\n<br>\r\n두 가지 렌더링 호출 방식의 공통점은 <b>HTM"},{"title":"Google Sheets API","author":"Jay.J","date":"2023-07-20T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2023-07-20-googleSheetsAPI","con":"---\r\n\r\n<br>\r\n\r\n최근 회사 업무로 Google Sheets API를 사용하였다.<br>\r\n이전까지 데이터를 관리, 연동 개발은 DateBase(DB)만 생각하었는데,<br>\r\nDB구축을 하지 않고 간단하게 데이터를 저장하고 연동하여 활용할 수 있었다.<br>\r\n<br>\r\n개인적으로 간단하고 편하게 사용할 수 있었기에 정보를 공유하고 작성한다.\r\n\r\n<br>\r\n\r\n<hr>\r\n<br>\r\n\r\n## Google Sheets API\r\nGoogle Sheets API를 사용하기 위해서는 Google Sheets를 생성해줘야한다.<br>\r\n\r\n<br>\r\n\r\n### Google Sheets 생성하기.\r\n\r\n<br>\r\n\r\n1. Google 메인 화면에서 상단의 메뉴 > 드라이브를 눌러준다.\r\n\r\n<img src=\"../assets/img/javascript/google_sheet_creat.png\" alt=\"\">\r\n\r\n<br>\r\n\r\n2. 본인의 드라이브로 접속이 되었다면, 좌측 상단에 신"},{"title":"React_MUI","author":"Jay.J","date":"2023-07-10T00:00:00.000Z","categories":["javascript","ReactJs","MUI","css"],"tags":["javascript","ReactJs","MUI","css"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/mui.png","url":"/post/2023-07-10-React_MUI","con":"---\r\n\r\n<br>\r\n\r\n## MUI란\r\nMUI(Material UI)는 Material Design을 구현해놓은 라이브러리이다.<br>\r\n이 라이브러리를 이용하면 material 디자인 스타일이 적용된 UI를 매우 쉽게 구현할 수 있다. <br>\r\n<br>\r\n\r\n### Material Design이란?\r\n구글은 모바일과 데스크탑 그리고 그 외 다양한 디바이스들을 아우르는 하나의 일관된 디자인 가이드라인을 공개하였는데, 이것이 바로 <b>Material Design</b>이다.<br>\r\n<br>\r\n머티리얼 디자인은 질감이 느껴지는 표면 (tactile surfaces) 과 대담하고 선명한 그래픽 디자인 (bold graphic design), 그리고 아름답고 직관적인 사용자 경험을 위한 자연스러운 애니메이션을 특징으로 한다.\r\n\r\n<br>\r\n\r\n## MUI 설치하기\r\nMUI는 npm, yarn 등으로 설치할 수 있다.\r\n\r\n```js\r\n// npm\r\nnpm install @mui/"},{"title":"느낌표 두개 연산자 - Double Exclamation Marks Operator","author":"Jay.J","date":"2022-12-12T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2022-12-12-doble_ExclamationMarks","con":"---\r\n\r\n<br>\r\n\r\n라이브러리를 사용하기 위하여 분석하다가 !! 연산자를 사용한 것을 본 적이 있다.<br>\r\n어떤 동작을 하는 연산자인지 검색해보고 알게된 내용을 정리하려고 한다.\r\n\r\n<br>\r\n\r\n## NOT 연산자인 (느낌표) and 느낌표 두개(!!) 연산자\r\n\r\n```js\r\nconsole.log(\"str\")      // \"str\"\r\nconsole.log(!(\"str\"))   //false\r\nconsole.log(!!(\"str\"))  //true\r\n\r\nconsole.log(\"\")         //\"\"\r\nconsole.log(!(\"\"))      //true\r\nconsole.log(!!(\"\"))     //false\r\n\r\nconsole.log(true)       //true\r\nconsole.log(!true)      //false\r\nconsole.log(!!true)     //true\r\n\r\nconsole.log(false)      //false\r\nconsol"},{"title":"클로져란 ?","author":"Jay.J","date":"2022-11-10T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2022-11-10-closure","con":"---\r\n\r\n<br>\r\n\r\n## 클로져란\r\n\r\n클로저는 함수와 함수가 선언된 어휘적 환경의 조합이다.<br>\r\n클로저를 이해하려면 자바스크립트가 어떻게 변수의 유효범위를 지정하는지(Lexical scoping)를 먼저 이해해야 한다.\r\n> MDN 출처\r\n\r\n<br>\r\n\r\n## 스코프\r\n\r\n자바스크립트의 스코프는 범위를 뜻한다.<br>\r\n\r\n```js\r\nfunction scope_a(){\r\n\tconst consoleData = 'a';\r\n\r\n\tfunction scope_b(){\r\n\t\tconst consoleData = 'b';\r\n\r\n\t\tconsole.log(consoleData); // b\r\n\t}\r\n\r\n\tscope_b();\r\n\tconsole.log(consoleData); // a\r\n}\r\n\r\nscope_a();\r\n```\r\n\r\n<br>\r\n\r\nscope_a 함수에서 consoleData 변수에 값 'a'를 넣었고,<br>\r\nscope_b 함수에서 consoleData 변수에 값 'b'를 "},{"title":"Web Component","author":"Jay.J","date":"2022-10-21T00:00:00.000Z","categories":["html","javascript"],"tags":["html","javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/html.png","url":"/post/2022-10-21-WebComponent","con":"---\r\n\r\n<br>\r\n\r\n최근 어플리케이션 시장이 점점 커지고 복잡해지면서 컴포넌트 기반의 프레임워크들이 등장하였다.<br>\r\n복잡한 소프트웨어들을 간단한 부분들로 나눠서 개발하는 방식으로 대표적으로 React, Vue, Angluar등의 자바스크립트 프레임워크들이 있다<br>\r\n\r\n최근에는 자바스크립트의 프레임워크이 인기가 많아지면서 관심을 받고 있는데<br>\r\n그 기반인 웹 컴포넌트에 대해서 알아보려고 한다.\r\n\r\n## Web Component란\r\n\r\n컴포넌트(Component)란 기능을 다른 코드로부터 분리된 재사용이 가능한 독립적인 모듈을 뜻한다.<br>\r\n컴포넌트 기반 프로그래밍을 하면 마치 레고 블록처럼 이미 만들어진 컴포넌들을 조합하여 화면을 구성할 수 있다.<br>\r\n\r\n<img src=\"/assets/img/html/webComponent.jpg\" alt=\"\">\r\n\r\n<br>\r\n웹 컴포넌트는 이러한 컴포넌트 기반 프로그래밍을 웹에서도 적용할 수 있도록 W3C에서 새"},{"title":"async 와 await","author":"Jay.J","date":"2021-08-10T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2021-08-10-asyncAndawait","con":"---\r\n\r\n<br>\r\n\r\n## async 와 await 란\r\n\r\nasync는 asynchronous의 약자로 비동기 방식이다.\r\nasync는 예전부터 많이 봤었다.\r\n\r\n스크립트를 호출할 때도 사용했었으며,\r\n\r\n```js\r\n<script type=\"text/javascript\" src=\"common/js/script2.js\" async></script>\r\n```\r\n> 스크립트는 비동기적으로 호출한다.<br>\r\n> <a href=\"/blog/posts/%2Fpost%2F2018-03-29-Where_do_you_place_the_JavaScript\" target=\"_blank\">'Where do you place the JavaScript?' 포스터</a>\r\n\r\nAjax 또한 Ajax(<b>Asynchronous</b> JavaScript and XML)의 약자로, ajax 옵션중 async옵션이 존재한다.\r\n\r\n\r\n```js\r\n$.ajax({\r\n    ...\r\n    async:"},{"title":"ES6의 Map Filter Reduce 함수들","author":"Jay.J","date":"2021-07-15T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2021-07-15-MapFilterReduceInES6","con":"---\r\n\r\n<br>\r\n\r\n## ES6의 Map Filter Reduce 함수들\r\n\r\nmap, filter, reduce 함수 모두 ES6에서 추가된 함수로써, 배열(Array)에서 결과를 도출하고자 할 때 사용된다.<br>\r\n기존의 for문을 이용하여 loop 돌면서 결과를 도출했던 방식보다 유용하고 간결하게 사용할 수 있을 것으로 생각하며,<br>\r\n3개의 함수를 알아보고 정리하려고 한다.\r\n\r\n<br>\r\n\r\n## Map\r\n\r\nmap() 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환한다.\r\n\r\n### 구문\r\n\r\n```js\r\narr.map(callback(currentValue[, index[, array]])[, thisArg])\r\n```\r\n\r\n### 사용법\r\n\r\n```js\r\nconst numbers = [1, 2, 3];\r\nconst doubles = numbers.map( (num) => num * 2 );\r\n\r\nconsol"},{"title":"VanillaJs","author":"Jay.J","date":"2020-08-25T00:00:00.000Z","categories":["javascript"],"tags":["javascript","VanillaJs"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-08-25-VanillaJs","con":"---\r\n\r\n<br>\r\n\r\n## Vanilla JS란?\r\nVanilla JS(바닐라 자바스크립트)란 어떠한 프레임워크와 라이브러리가 적용되지 않은 날 것의 자바스크립트를 바닐라 자바스크립트라고 한다.\r\n\r\n<br>\r\n\r\n## 왜 Vanilla JS 사용하는 것인가\r\n개인적인 생각이지만 배보다 배꼽이 커지는 상황도 많았던 것 같다.<br>\r\njQuery라는 DOM을 컨트롤 하는데에 있어서 매우 뛰어난 라이브러리가 있다.<br>\r\n하지만 특정한 곳에서 한번만 사용할 것인데 그를 위해 jQuery를 사용한다면 효율적인 면에서 떨어진다.<br>\r\njQuery 또한 자바스크립트의 라이브러리이기 때문에 순수한 자바스크립트보다 속도면에서 성능이 떨어진다.<br>\r\n<br>\r\n또한 이전까지의 자바스크립트 버전은 DOM에 접근하려면 jQuery에 비해 길게 작성해야했기에 조금 더 편리한 jQuery를 개발하는 데 편하고 좋았다고 생각한다.<br>\r\n\r\n```js\r\n// class가 item 인 요소"},{"title":"자바스크립트 엄격모드?","author":"Jay.J","date":"2020-06-11T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-06-11-use_strict","con":"---\r\n\r\n<br>\r\n\r\n## 자바스크립트 엄격모드란 ?\r\n\r\nECMAScript 5 에서 소개되었다.<br>\r\n기본으로 우리 사용하는 자바스크립트는 <b>\"느슨한모드(sloppy mode)\"</b>라고 불리며<br>\r\n문법이나 살짝 벗어나는 오류 정도는 조용히 무시하고 작동되었다.<br>\r\n<b>\"엄격한 모드(strict mod)\"</b>를 사용하면 조금 더 디테일하게 문법이나 오류를 잡아낸다.\r\n\r\n<br>\r\n\r\n## 엄격모드를 사용하려면\r\n\r\n사용법은 간단하다. <br>\r\n엄격모드를 사용하기 위해서는 스크립트를 작성하기 전 최상단에 '\"use strict\";'를 작성해준다<br>\r\n\r\n```js\r\n\r\n'use strict';\r\n\r\nfunction A(){\r\n  ...\r\n}\r\n\r\nvar b = 'hi';\r\n\r\n```\r\n\r\n## 무엇이 다른가\r\n\r\n엄격모드를 설명하면서 조금 더 디테일하게 문법과 오류를 잡아낸다고 설명했다.<br>\r\n\r\n```js\r\n// 느슨한 모드\r\n\r\nb = "},{"title":"Javascript에서의 This","author":"Jay.J","date":"2020-04-15T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2020-04-15-javascriptThis","con":"---\r\n\r\n<br>\r\n\r\n## Javascript에서의 This\r\n\r\nthis가 무엇이냐라고 누군가 물어봤을 때 의미 자체에 순간 망설였던 적이 있었다.<br>\r\n그래서 this는 무엇이고 어떻게 동작하는 지에 대해 포스팅 하려고 한다.\r\n\r\n## This 무엇이냐 넌\r\nthis. 자바스크립트의 this는 호출한 객체가 저장되어있는 속성이다.\r\n\r\n```js\r\nconsole.log(this);  // window\r\n```\r\n\r\n기본적으로 this는 window 객체의 정보를 저장하고 있다.<br>\r\n기본적으로 사용하는 메서드들 또한 상단에의 window를 통해 호출하기 때문이다.\r\n\r\n```js\r\nwindow.console.log(this);  // window\r\n```\r\n> console에 찍힌 window 객체를 자세히보기를 열어서 찾으면 console를 찾을 수 있을 것이다.\r\n\r\nwindow객체의 console 객체의 log 메서드를 통하여 호출하였기에 this는 windo"},{"title":"Require.js 을 사용했던 프로젝트에 대한 회고","author":"Jay.J","date":"2019-02-10T00:00:00.000Z","categories":["javascript"],"tags":["javascript","AMD","require.js","Retrospect"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2019-02-10-requirejs_use","con":"---\r\n\r\n<br>\r\n\r\n## Require.js 을 사용했던 프로젝트에 대한 회고\r\n\r\n기존의 프로젝트를 진행할 때에는 필요한 기능을 전역 함수 파일에 추가하여 사용했다.<br>\r\n전역 파일에 기능을 추가하여 사용하다보니 기능이 늘어날 수록 코드는 복잡해져갔으며 <br>\r\n모든 페이지에서 불필요한 기능까지 전부 호출하는게 비효율적으로 느껴졌다.<br>\r\n<br>\r\n그렇기에 최근 알게 되었던 AMD/Require.js에 관심을 더욱 가지게 되었으며, <br>\r\n신규 프로젝트에 Require.js를 사용해보기 했다.<br>\r\n> <a href=\"/blog/posts/%2Fpost%2F2018-06-23-AMD_requirejs\">AMD / Require.js에 대한 포스팅</a>\r\n\r\n<br>\r\n\r\n### 프로젝트 초반\r\n\r\n디자인을 보고 퍼블리싱하며, 공통으로 쓰이는 기능과 특정 페이지에서 사용 되는 기능을 파악했다.<br>\r\n공통으로 쓰이는 기능들 가운데, 기존 전역 함수에 있었"},{"title":"AMD & require.js","author":"Jay.J","date":"2018-06-23T00:00:00.000Z","categories":["javascript"],"tags":["javascript","AMD","require.js"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-06-23-AMD_requirejs","con":"---\r\n\r\n<br>\r\n\r\n## AMD\r\n\r\nAMD(Asynchronous Module Definition)란 모듈을 정의하는 방법과 모듈이 필요할 때 비동기로 로딩하는 방법을 정의한 API 이다.\r\nAMD는 세 가지의 핵심 개념을 가지고 동작한다.\r\n<br>\r\n#### 1. 동적 로딩\r\n\r\n동적 로딩(Dynamic Loading, Lazy Loading)은 페이지 렌더링을 방해하지 않으면서 필요한 파일만 로딩할 수 있다.\r\n\r\n브라우저는 문서를 위에서 아래로 읽어내려오며, \\<script\\> 태그를 만나면 \\<script\\>의 HTTP 요청과 다운로드, 파싱(Parsing), 실행이 일어나는 동안 브라우저는 다른 동작을 하지 않는다.\r\n그로 인하여 페이지 렌더링은 느려지는데, 이를 최적화 하는 기법으로 \\<script\\> 태그를 \\<body\\> 태그의 마지막에 배치하는 방법이 있다.\r\n하지만 이 방법 또한 첫 렌더링과 첫 인터랙션에 필요하지 않은, 페이지에 필요한 모든 JavaSc"},{"title":"Javascript Call Stack and Event Loop","author":"Jay.J","date":"2018-05-11T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-05-11-Call_Stack_and_Event_Loop","con":"---\r\n\r\n<br>\r\n\r\n## Call Stack and Event Loop\r\n> 호출 스택 및 이벤트 루프\r\n\r\n<br>\r\n\r\n### 자바 스크립트 엔진\r\njavascript 를 해석하고 실행하는 인터프리터.\r\n> 인터프리터 : 프로그래밍 언어의 소스 코드를 바로 실행하는 컴퓨터 프로그램 또는 환경을 말한다.\r\n\r\n엔진에는 4가지로 구성되어있다.\r\n- [Heap](#heap)\r\n- [CallStack](#callstack)\r\n- [EventQueue](#eventqueue)\r\n- [EventLoop](#eventloop)\r\n\r\n<br>\r\n\r\n### Heap\r\n객체나 변수 값들이 들어가있는 영역으로 메모리의 할당이 일어나는 곳이다.\r\n\r\n<br>\r\n\r\n### CallStack\r\n\r\nCall Stack은 코드 실행에 따라 호출 스택(task)이 쌓이는 곳이다.<br>\r\n자바스크립트는 기본적으로 싱글 쓰레드 기반 언어이다.<br>\r\n따라서 코드 순서에 따라 호출 스택(task)이 쌓이"},{"title":"Javascript 실행 컨텍스트","author":"Jay.J","date":"2018-05-04T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-05-04-Execution_Context","con":"---\r\n\r\n<br>\r\n\r\n## Javascript 실행 컨텍스트\r\n\r\n<br>\r\n\r\n### 실행 컨테스트란\r\n\r\n자바스크립트가 실행될 때 생성되는 실행 단위를 실행 컨텍스트라고 부른다.  \r\n자바스크립트가 실행되면 함수들이 차곡차곡 <b>콜 스택(Call Stack)</b>이라 곳에 쌓이는데,  \r\n<b>실행 컨텍스트는 Call Stack에 쌓이는 하나하나의 실행 정보</b>이다.\r\n\r\n```js\r\n\r\nconsole.log('전역 스코프');\r\nfunction first(){\r\n  console.log('First Context');\r\n  second();\r\n}\r\nfunction second(){\r\n  console.log('Second Context');\r\n}\r\nfirst();\r\n\r\n// 컨텍스트 실행순서\r\n// 1. console.log('전역 스코프') 컨텍스트에 들어감  \r\n// 2. first함수가 컨텍스트에 들어감  \r\n// 3. second함수가 컨텍스트에 들어감\r\n/"},{"title":"How do you stop event propagation?","author":"Jay.J","date":"2018-04-09T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-04-09-stop_event_propagation","con":"---\r\n\r\n<br>\r\n\r\n## How do you stop event propagation?\r\n> 이벤트 전파를 어떻게 중지합니까?\r\n\r\n<br>\r\n\r\n### 이벤트 전파란?\r\n\r\n#### html\r\n```html\r\n<div class=\"boxDiv click01\">\r\n    <p>3</p>\r\n    <div class=\"boxDiv click02\">\r\n        <p>2</p>\r\n        <div class=\"boxDiv click03\">\r\n            <p>1</p>\r\n        </div>\r\n    </div>\r\n</div>\r\n<p class=\"result\"></p>\r\n```\r\n#### css\r\n```css\r\n.boxDiv{border:1px solid #000;padding:20px}\r\n.click01{width:300px;margin:0 50px;background:#aaa}\r\n.click02{background:#ddd}\r\n.click03{backg"},{"title":"Where do you place the JavaScript?","author":"Jay.J","date":"2018-03-29T00:00:00.000Z","categories":["javascript"],"tags":["javascript"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/javaScript.png","url":"/post/2018-03-29-Where_do_you_place_the_JavaScript","con":"---\r\n\r\n<br>\r\n\r\n## Where do you place the JavaScript?\r\n> JavaScript는 어디에 두어야합니까?\r\n\r\n<br>\r\n\r\n### 1. Head, Body\r\nhead Tag 섹션에 삽입하거나 body Tag 섹션의 시작 부분에 놓는 방법은 안좋다.  \r\n해당 부분에 위치시킬 경우 문서는 페이지 로드시  \r\n페이지를 읽다가 script Tag를 만날 경우 페이지의 분석을 멈추고  \r\n스크립트를 로드한 후 페이지를 읽기 때문에 성능면에서 안좋다.  \r\n<br>\r\n\r\n#### 브라우저가 웹 사이트를 로드 할 때 일어나는 일\r\n1. 문서 가져 온다 (예 : index.html, index.asp, main.php ...등)\r\n2. HTML 구문 분석한다.\r\n3. 파서는 문서를 위에서 부터 아래로 읽는다.  \r\n    중간에 외부 스크립트 파일을 참조하는 script Tag를 발견한다.\r\n4. 브라우저가 스크립트 파일을 확인하고 요청한다.  \r\n    "}]}