{"postlist":[{"title":"Git Fetch","author":"Jay.J","date":"2022-01-23T00:00:00.000Z","categories":["Git"],"tags":["Git"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/git.png","url":"/post/2022-01-23-GitFetch","con":"---\n\n<br>\n\n이전 Git 도입에 대한 포스팅을 작성하고 Git을 사용하면서 commit, pull, push, merge 등의 자주 사용하는 명령어만 포스팅하고 사용하였다.<br>\n기존에 설명한 명령어 외에 Fetch에 대해서 포스팅하려고 한다.\n\n## Fetch\n\n원격 저장소에 저장 되어있는 소스를 로컬 저장소로 가져오는 명령어이다.<br>\n<br>\n원격 저장소에서 소스를 가져오는 명령어는 Pull도 있다.<br>\nPull과 Fetch의 차이는 병합(Merge)에 있다.\n\n- <b>Pull : </b>원격 저장소에서 소스를 가져와서 자동으로 병합한다.\n- <b>Fetch : </b>원격 저장소에서 소스를 가져오기만 한다.\n\n<br>\n\nPull의 경우 자동으로 병합해주기 때문에 어떤 내용이 병합되었는 지 스스로 찾아서 확인해야한다.<br>\nFetch의 경우 소스만 가져오기 때문에 변경된 내용을 한번에 확인할 수 있다.<br>\n하지만 직접 병합하는 과정을 거쳐야한다.<br>\n<"},{"title":"Git 도입과 브랜치전략","author":"Jay.J","date":"2022-01-12T00:00:00.000Z","categories":["Git"],"tags":["Git"],"math":"true","mermaid":"true","img":"/blogAPI/assets/img/git.png","url":"/post/2022-01-12-GitIntroduction","con":"---\n\n<br>\n\n## Git 도입과 브랜치전략\n\n사내에 소스 형상관리를 하고 있지않아, 소스가 날아가거나 백업파일을 만들어서 불필요한 용량을 차지한다거나 크고 작은 일들이 지속적으로 발생하였다.<br>\n그런 일들을 방지 및 해결하고자 Git을 도입하여 형상관리를 하기로 했다.\n\n- 1. Git 도입하기.\n- 2. Git 브런치전략.\n- 3. Git 도입 전과 후.\n\n<br>\n\n## 1. Git 도입하기.\n어떤 플랫폼을 사용할 것인가에 대해서 무료로 사용하고 비공개로 소스를 관리하기 위하여 Gitlab을 선택하였다.<br>\n> <a href=\"https://about.gitlab.com/\" target=\"blank\">Gitlab 바로가기</a>\n\n<br>\n\n### 1-1. git이란.\n\n형상 관리 도구 중 하나로써, 파일의 버전을 관리하는 시스템이다.<br>\n> 같은 형상 관리 도구로는 SVN이 있다.<br>\n\nGit은 각각의 개발 PC(로컬)와 중앙 저장소(원격/서버)에 소스를 "}]}