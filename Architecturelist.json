{"postlist":[{"title":"CI(codeigniter)의 MVC패턴 프로젝트 경험","author":"Jay.J","date":"2019-06-05T00:00:00.000Z","categories":["Architecture"],"tags":["Architecture","Design Pattern","Retrospect"],"math":"true","mermaid":"true","url":"/post/2019-06-05-CodeigniterAndMVC_Use.md","con":"---\n<!-- <img src=\"/assets/img/vue/webkitflow.png\" alt=\"\"> -->\n\n회사에서 개발팀에 코드이그나이터를 도입하였다.<br>\n개발팀에 도입한다고 해서 사실 크게 관심이 없었으며,<br>\n큰 영향도 없을 것이라고 생각했다.<br>\n<br>\n하지만 퍼블리셔 입장에서도 기존의 방식과 조금씩 달랐고<br>\n하나씩 경험했던 내용을 기록해두려고 한다.<br>\n\n## Codeigniter란\n\nCodeigniter(이하 코드이그나이터)란 PHP로 작성된 웹 프레임워크다.<br>\nMVC패턴으로 동작한다.<br>\n> <a href=\"/posts/whatIsMVC/\">MVC에 관한 포스팅</a>\n\n<br>\n\n## 기존의 방식과 달라진 퍼블리셔 업무\n\n기존의 방식과 제일 크게 달라졌던 점은 역시 MVC패턴을 사용함에 따른 변화이다.<br>\n\n<img src=\"/assets/img/architecture/mvc.png\" alt=\"\" style=\"max-width:"},{"title":"MVC패턴에 대해서","author":"Jay.J","date":"2019-05-09T00:00:00.000Z","categories":["Architecture"],"tags":["Architecture","Design Pattern"],"math":"true","mermaid":"true","url":"/post/2019-05-09-whatIsMVC.md","con":"---\n\n## MVC 란\n\nMVC는 Model, View, Controller의 약자이다.<br>\nMVC는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴이다.<br>\n소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있다.<br>\n\n<img src=\"/assets/img/architecture/mvc.png\" alt=\"\" style=\"max-width:500px\">\n\nUser는 Controller에게 요청하고, Controller는 Model에게 명령을 보내고,<br>\nModel은 해당의 데이터를 View에게 제공하여, User는 View를 통해 정보를 얻을 수 있다.<br>\n<br>\n하나 하나의 기능을 자세히 살펴보면 아래와 같다.<br>\n<br>\n\n### Model\n\n모델(model)이란 어떠한 동작을 수행하는 코드를 말한다.<br>\n모델은 데이터가 무엇인지를 정의한다.<br>\n데이터 자체는 사용자에게 어떻게 보일지에 대해 신"}]}